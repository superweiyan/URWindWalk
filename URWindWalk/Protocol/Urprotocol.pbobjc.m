// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: URProtocol.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Urprotocol.pbobjc.h"
#import "UrpacketType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - UrprotocolRoot

@implementation UrprotocolRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[UrpacketTypeRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - UrprotocolRoot_FileDescriptor

static GPBFileDescriptor *UrprotocolRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"URWWPacketProtocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - URProtocol

@implementation URProtocol

@dynamic uri;
@dynamic hasHeader, header;
@dynamic hasLoginReq, loginReq;
@dynamic hasLoginRes, loginRes;
@dynamic hasLogoutReq, logoutReq;
@dynamic hasLogoutRes, logoutRes;

typedef struct URProtocol__storage_ {
  uint32_t _has_storage_[1];
  URPacketType uri;
  PHeader *header;
  URLoginReq *loginReq;
  URLoginRes *loginRes;
  URLogoutReq *logoutReq;
  URLogoutRes *logoutRes;
} URProtocol__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uri",
        .dataTypeSpecific.enumDescFunc = URPacketType_EnumDescriptor,
        .number = URProtocol_FieldNumber_Uri,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(URProtocol__storage_, uri),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "header",
        .dataTypeSpecific.className = GPBStringifySymbol(PHeader),
        .number = URProtocol_FieldNumber_Header,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(URProtocol__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "loginReq",
        .dataTypeSpecific.className = GPBStringifySymbol(URLoginReq),
        .number = URProtocol_FieldNumber_LoginReq,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(URProtocol__storage_, loginReq),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "loginRes",
        .dataTypeSpecific.className = GPBStringifySymbol(URLoginRes),
        .number = URProtocol_FieldNumber_LoginRes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(URProtocol__storage_, loginRes),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "logoutReq",
        .dataTypeSpecific.className = GPBStringifySymbol(URLogoutReq),
        .number = URProtocol_FieldNumber_LogoutReq,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(URProtocol__storage_, logoutReq),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "logoutRes",
        .dataTypeSpecific.className = GPBStringifySymbol(URLogoutRes),
        .number = URProtocol_FieldNumber_LogoutRes,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(URProtocol__storage_, logoutRes),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[URProtocol class]
                                     rootClass:[UrprotocolRoot class]
                                          file:UrprotocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(URProtocol__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\003\010\000\004\010\000\005\t\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t URProtocol_Uri_RawValue(URProtocol *message) {
  GPBDescriptor *descriptor = [URProtocol descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:URProtocol_FieldNumber_Uri];
  return GPBGetMessageInt32Field(message, field);
}

void SetURProtocol_Uri_RawValue(URProtocol *message, int32_t value) {
  GPBDescriptor *descriptor = [URProtocol descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:URProtocol_FieldNumber_Uri];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - URLoginReq

@implementation URLoginReq

@dynamic passport;
@dynamic password;

typedef struct URLoginReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *passport;
  NSString *password;
} URLoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "passport",
        .dataTypeSpecific.className = NULL,
        .number = URLoginReq_FieldNumber_Passport,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(URLoginReq__storage_, passport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = URLoginReq_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(URLoginReq__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[URLoginReq class]
                                     rootClass:[UrprotocolRoot class]
                                          file:UrprotocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(URLoginReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - URLoginRes

@implementation URLoginRes


typedef struct URLoginRes__storage_ {
  uint32_t _has_storage_[1];
} URLoginRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[URLoginRes class]
                                     rootClass:[UrprotocolRoot class]
                                          file:UrprotocolRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(URLoginRes__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - URLogoutReq

@implementation URLogoutReq

@dynamic passport;
@dynamic password;

typedef struct URLogoutReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *passport;
  NSString *password;
} URLogoutReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "passport",
        .dataTypeSpecific.className = NULL,
        .number = URLogoutReq_FieldNumber_Passport,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(URLogoutReq__storage_, passport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = URLogoutReq_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(URLogoutReq__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[URLogoutReq class]
                                     rootClass:[UrprotocolRoot class]
                                          file:UrprotocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(URLogoutReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - URLogoutRes

@implementation URLogoutRes


typedef struct URLogoutRes__storage_ {
  uint32_t _has_storage_[1];
} URLogoutRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[URLogoutRes class]
                                     rootClass:[UrprotocolRoot class]
                                          file:UrprotocolRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(URLogoutRes__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
